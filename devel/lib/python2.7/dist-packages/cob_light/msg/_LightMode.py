"""autogenerated by genpy from cob_light/LightMode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class LightMode(genpy.Message):
  _md5sum = "5c61cdd41b56356f16e4e7ab38a77236"
  _type = "cob_light/LightMode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 mode
uint8 NONE = 0 			# will turn everything off
uint8 STATIC = 1 		# will change the LEDs to "color"
uint8 FLASH = 2 		# will change the LEDs frequently with "frequency" from "color" to black
uint8 BREATH = 3 		# will change the LEDs smoothly with "frequency" from "color" to black
uint8 BREATH_COLOR = 4 	# will change the LEDs smoothly with "frequency" from "color" to black
						# and flips color in time
uint8 FADE_COLOR = 5 	# will fade the colors in rainbow

std_msgs/ColorRGBA color #the color which will be used
float32 frequency 		# in Hz
float32 timeout 		# in s, requested mode will be executed for max timout s.
						# default is 0 and meens no timeout.
int32 pulses 			# spezifies the amount of pulses which will be executed.
			 			# eg: mode = flash, pulses = 2. Meens the light will flash two times
int8 priority 			# priority [-20,20] default = 0. Modes with same or higher priorities will 
						# be executed.
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

"""
  # Pseudo-constants
  NONE = 0
  STATIC = 1
  FLASH = 2
  BREATH = 3
  BREATH_COLOR = 4
  FADE_COLOR = 5

  __slots__ = ['mode','color','frequency','timeout','pulses','priority']
  _slot_types = ['uint8','std_msgs/ColorRGBA','float32','float32','int32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,color,frequency,timeout,pulses,priority

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LightMode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.frequency is None:
        self.frequency = 0.
      if self.timeout is None:
        self.timeout = 0.
      if self.pulses is None:
        self.pulses = 0
      if self.priority is None:
        self.priority = 0
    else:
      self.mode = 0
      self.color = std_msgs.msg.ColorRGBA()
      self.frequency = 0.
      self.timeout = 0.
      self.pulses = 0
      self.priority = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B6fib.pack(_x.mode, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.frequency, _x.timeout, _x.pulses, _x.priority))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.mode, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.frequency, _x.timeout, _x.pulses, _x.priority,) = _struct_B6fib.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B6fib.pack(_x.mode, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.frequency, _x.timeout, _x.pulses, _x.priority))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.mode, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.frequency, _x.timeout, _x.pulses, _x.priority,) = _struct_B6fib.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B6fib = struct.Struct("<B6fib")
