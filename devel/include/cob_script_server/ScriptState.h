/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/kerekare/workspace/care-o-bot/src/cob_command_tools/cob_script_server/msg/ScriptState.msg
 *
 */


#ifndef COB_SCRIPT_SERVER_MESSAGE_SCRIPTSTATE_H
#define COB_SCRIPT_SERVER_MESSAGE_SCRIPTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cob_script_server
{
template <class ContainerAllocator>
struct ScriptState_
{
  typedef ScriptState_<ContainerAllocator> Type;

  ScriptState_()
    : header()
    , number(0)
    , function_name()
    , component_name()
    , parameter_name()
    , full_graph_name()
    , state(0)
    , error_code(0)  {
    }
  ScriptState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , number(0)
    , function_name(_alloc)
    , component_name(_alloc)
    , parameter_name(_alloc)
    , full_graph_name(_alloc)
    , state(0)
    , error_code(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _number_type;
  _number_type number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_name_type;
  _function_name_type function_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _component_name_type;
  _component_name_type component_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameter_name_type;
  _parameter_name_type parameter_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _full_graph_name_type;
  _full_graph_name_type full_graph_name;

   typedef int8_t _state_type;
  _state_type state;

   typedef int16_t _error_code_type;
  _error_code_type error_code;


    enum { UNKNOWN = 0 };
     enum { ACTIVE = 1 };
     enum { SUCCEEDED = 2 };
     enum { FAILED = 3 };
     enum { PAUSED = 4 };
 

  typedef boost::shared_ptr< ::cob_script_server::ScriptState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_script_server::ScriptState_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct ScriptState_

typedef ::cob_script_server::ScriptState_<std::allocator<void> > ScriptState;

typedef boost::shared_ptr< ::cob_script_server::ScriptState > ScriptStatePtr;
typedef boost::shared_ptr< ::cob_script_server::ScriptState const> ScriptStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_script_server::ScriptState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_script_server::ScriptState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cob_script_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/hydro/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'cob_script_server': ['/home/kerekare/workspace/care-o-bot/devel/share/cob_script_server/msg', '/home/kerekare/workspace/care-o-bot/src/cob_command_tools/cob_script_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cob_script_server::ScriptState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_script_server::ScriptState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_script_server::ScriptState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_script_server::ScriptState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_script_server::ScriptState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_script_server::ScriptState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_script_server::ScriptState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4981a5a5be8dbf926085d25a1acf43ca";
  }

  static const char* value(const ::cob_script_server::ScriptState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4981a5a5be8dbf92ULL;
  static const uint64_t static_value2 = 0x6085d25a1acf43caULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_script_server::ScriptState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_script_server/ScriptState";
  }

  static const char* value(const ::cob_script_server::ScriptState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_script_server::ScriptState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int16 number\n\
string function_name\n\
string component_name\n\
string parameter_name\n\
string full_graph_name\n\
\n\
# Possible execution states\n\
byte UNKNOWN=0\n\
byte ACTIVE=1\n\
byte SUCCEEDED=2\n\
byte FAILED=3\n\
byte PAUSED=4\n\
\n\
byte state # state of execution\n\
int16 error_code # current error_code for state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::cob_script_server::ScriptState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_script_server::ScriptState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.number);
      stream.next(m.function_name);
      stream.next(m.component_name);
      stream.next(m.parameter_name);
      stream.next(m.full_graph_name);
      stream.next(m.state);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ScriptState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_script_server::ScriptState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_script_server::ScriptState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number);
    s << indent << "function_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function_name);
    s << indent << "component_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.component_name);
    s << indent << "parameter_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter_name);
    s << indent << "full_graph_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.full_graph_name);
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "error_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_SCRIPT_SERVER_MESSAGE_SCRIPTSTATE_H
